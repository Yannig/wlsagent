#summary This page describe the wlsagent Nagios plugin.

=== Introduction ===

Wlsagent is a small JMX client, which exposes performance metrics for !WebLogic 9.x and 10.x servers.

You can get the performance data by submitting simple HTTP requests to the plugin, as it embeds a Jetty container. The plugin runs in the background and handles every monitoring request, which allows a small memory footprint (a 32MB JVM heap is sufficient), no CPU overhead and short response time.

=== Building the plugin ===

*Ant build*

The files provided in the 'Downloads' section have been compiled with a 1.6 SDK and Jetty 7.3.0 dependencies. If you want to build the plugin by yourself, just follow these steps:

  * Download the last jetty distribution [http://www.eclipse.org/jetty/downloads.php here].
  * Create a lib directory in your working directory.
  * Copy these jars in the lib directory:

    jetty-continuation-`<version>`.jar<br>
    jetty-http-`<version>`.jar<br>
    jetty-io-`<version>`.jar<br>
    jetty-security-`<version>`.jar<br>
    jetty-server-`<version>`.jar<br>
    jetty-servlet-`<version>`.jar<br>
    jetty-util-`<version>`.jar<br>
    servlet-api-2.5.jar<br>

  * Check out the project source files by following [http://code.google.com/p/wlsagent/source/checkout these instructions]. You should have a top level source directory named 'src'. 
  * Copy the following Ant build.xml file in your working directory:

{{{
<project name="wlsagent" basedir="." default="build">

    <property name="src.dir"     value="src"/>
    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
    <property name="lib.dir"     value="lib"/>
    <property name="main-class"  value="net.wait4it.wlsagent.WlsAgent"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="true"/>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>

    <target name="build" depends="clean,jar"/>

</project>
}}}

  * Run ant.

*Maven build*

Kiril Dunn submitted this nice contribution for those who would like to use Maven to build the project. It requires that you add the two WebLogic runtime dependencies (wljmxclient.jar and wlclient.jar) to your local repository (see Maven documentation [http://maven.apache.org/general.html#importing-jars here]). The advantage of this solution is that you will get a unique jar featuring all the required dependencies.

Just adapt the following pom.xml to suit your needs:

{{{
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.wait4it</groupId>
    <artifactId>wlsagent</artifactId>
    <version>r76</version>

    <properties>
        <jetty.version>7.4.4.v20110707</jetty.version>
    </properties>

    <build>
        <sourceDirectory>src</sourceDirectory>

        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>net.wait4it.wlsagent.WlsAgent</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


    <dependencies>
        <dependency>
            <groupId>weblogic</groupId>
            <artifactId>wlclient</artifactId>
            <version>9.2</version>
        </dependency>
        <dependency>
            <groupId>weblogic</groupId>
            <artifactId>wljmxclient</artifactId>
            <version>9.2</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-continuation</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-http</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-io</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-security</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty.version}</version>
        </dependency>
    </dependencies>
</project>
}}}

=== Running the plugin ===

You can use the sample script below to run the plugin. Make sure JAVA_HOME variable is defined and points to a 1.6 JDK installation path.

{{{
#!/bin/bash

CURRENT_PATH=$(dirname "$0")
LIB_PATH=${CURRENT_PATH}/lib
CLASSPATH=${CURRENT_PATH}/wlsagent.jar

for jar in $(find ${LIB_PATH} -name '*.jar'); do
  CLASSPATH=${CLASSPATH}:${jar};
done

${JAVA_HOME}/bin/java -Xmx32m -cp ${CLASSPATH} net.wait4it.wlsagent.WlsAgent "$@" > /dev/null 2>&1 &
}}}

The content of the working directory should look like this :
  * the lib directory
  * the wlsagent.jar file
  * the previous shell script

The lib directory contains the jar dependencies for Jetty and the !WebLogic implementation of the 't3' protocol:

 jetty-continuation-`<version>`.jar<br>
 jetty-http-`<version>`.jar<br>
 jetty-io-`<version>`.jar<br>
 jetty-security-`<version>`.jar<br>
 jetty-server-`<version>`.jar<br>
 jetty-servlet-`<version>`.jar<br>
 jetty-util-`<version>`.jar<br>
 servlet-api-2.5.jar<br>
 wlclient.jar<br>
 wljmxclient.jar<br>

You can get the last Jetty distribution from the Eclipse site:

http://www.eclipse.org/jetty/downloads.php

The !WebLogic jars are available in the ${WL_HOME}/server/lib directory of the !WebLogic server distribution.

Below is a Unix CLI invocation example of the previous script:

{{{
./run.sh 9090
}}}

=== Using the plugin ===
  
Once the plugin is running, you can invoke it for instance with wget. In the example below, the plugin is listening on the port 9090, and the target server on the port 7001.

wget -q -O - http://localhost:9090/wlsagent/WlsAgent?hostname=localhost&port=7001


The above command produces the following output:

3|Unable to get MBeanServerConnection for JMXServiceURL service:jmx:t3://localhost:7001/jndi/weblogic.management.mbeanservers.runtime

That's fair enough, as we have to provide credentials to access our !WebLogic MBeanServer. Notice the first character of the command output string is the regular Nagios exit code (UNKNOWN in this case).

In order to monitor your application servers, you can create a specific user on the !WebLogic side, and make sure it belongs to the monitor group. This is particularly important if your WebLogic domain is secured with SSL, as an administrative user can't use an non-administrative port.

Let's retry by adding the credentials :

wget -q -O - 'http://localhost:9090/wlsagent/WlsAgent?hostname=localhost&port=7001&username=nagios&password=nagios' 

This time, we get this output:

0|server1: status OK|

The Nagios exit code is 0 (OK), as we didn't perform any test. 'server1' is the name of our !WebLogic instance.

Next we're going to get information about the JVM heap usage by adding [Jvm jvm]=!UsedMemory;80;90 to the request parameters :

wget -q -O - 'http://localhost:9090/wlsagent/WlsAgent?hostname=localhost&port=7001&username=nagios&password=nagios&jvm=UsedMemory;80;90'

The two numeric values at the end are the warning and critical thresholds for the memory usage, we will go back on this later.

The command output is:

0|server1: status OK|!HeapSize=256M;;;0;512 !UsedMemory=194M;;;0;512

As you can see, we get the current heap size, the maximum heap size and the amount of memory currently used by the server.

Let's try to change the warning threshold value to '30':

wget -q -O - 'http://localhost:9090/wlsagent/WlsAgent?hostname=localhost&port=7001&username=nagios&password=nagios&jvm=UsedMemory;30;90'

We get this:

1|server1: status WARNING - Warning alert raised by the [Jvm jvm] test |!HeapSize=256M;;;0;512 !UsedMemory=200M;;;0;512

A warning alert is raised by the test, as the ratio used memory / maximum memory is superior to 30% (our warning threshold).

See [Invocation] page of this wiki for script samples.

=== Screenshots ===

Here is below a sample of the kind of graph you can get with !HeapSize and !UsedMemory properties (generated with PNP4Nagios):

https://lh6.googleusercontent.com/_GD7v8WzxfNA/TbGe2-SFQ_I/AAAAAAAAAmo/raSsL_i6iCY/s400/nagios.jpg